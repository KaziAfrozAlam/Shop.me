const fs = require('fs');
const argv = require('minimist')(process.argv.slice(2));

const inFilepath = argv.in;
const outFilepath = argv.out || 'parsed-har.json';

if (!inFilepath) {
  console.log(`
    usage: har-parser --in=path/to/file [--out=parsed-har.json] [--filter=/api/some-endpoint]
  `);
  process.exit(0);
}

const contents = fs.readFileSync(inFilepath, 'utf8');
const harData = JSON.parse(contents);

const normalizeJson = (str) => str.replace(/\/n/g, '').replace(/\\/g, '');

const normalizeRequest = (request) => {
  if (!request.postData) {
    return null;
  }

  if (request.method === 'POST' || request.method === 'PUT' || request.method === 'PATCH') {
    try {
      return JSON.parse(normalizeJson(request.postData.text));
    } catch (err) {
      return request.postData.text;
    }
  }
  return null;
};

const normalizeResponse = (response) => {
  try {
    return JSON.parse(normalizeJson(response.content.text));
  } catch (err) {
    return response.content.text;
  }
};

const output = harData.log.entries.reduce((acc, entry) => {
  acc.push({
    url: entry.request.url,
    queryString: entry.request.queryString,
    method: entry.request.method,
    status: entry.response.status,
    statusText: entry.response.statusText,
    requestData: normalizeRequest(entry.request),
    responseData: normalizeResponse(entry.response),
  });
  return acc;
}, []);

const filteredOutput = argv.filter
  ? output.filter((entry) => entry.url.includes(argv.filter))
  : output;

fs.writeFileSync(outFilepath, JSON.stringify(filteredOutput, null, 2), 'utf8');
console.log(`outputed to ${outFilepath} successfully`);
process.exit(1);
